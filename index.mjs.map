{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport isndarrayLikeWithDataType from '@stdlib/assert-is-ndarray-like-with-data-type';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport { isPrimitive as isNegativeInteger } from '@stdlib/assert-is-negative-integer';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\nimport hasEqualValues from '@stdlib/array-base-assert-has-equal-values-indexed';\nimport min from '@stdlib/math-base-special-fast-min';\nimport without from '@stdlib/array-base-without';\nimport ndarraylike2ndarray from '@stdlib/ndarray-base-ndarraylike2ndarray';\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport nditerStacks from '@stdlib/ndarray-iter-stacks';\nimport numel from '@stdlib/ndarray-base-numel';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns a function which interchanges two vectors.\n*\n* @param {Function} base - \"base\" function which interchanges two vectors\n* @param {(String|null)} dtype - array data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a data type\n* @returns {Function} function wrapper\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import array from '@stdlib/ndarray-array';\n* import { ndarray as dswap } from '@stdlib/blas-base-dswap';\n*\n* var swap = factory( dswap, 'float64' );\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* swap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float64Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float64Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction factory( base, dtype ) {\n\tvar isValid;\n\tif ( !isFunction( base ) ) {\n\t\tthrow new TypeError( format( 'null3c', base ) );\n\t}\n\tif ( !isDataType( dtype ) && dtype !== null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must a data type. Value: `%s`.', dtype ) );\n\t}\n\tisValid = ( dtype ) ? isValidWrapper : isndarrayLike;\n\treturn swap;\n\n\t/**\n\t* Tests if an input value is an ndarray-like object having a specified data type.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating if an input value is an ndarray-like object having a specified data type\n\t*/\n\tfunction isValidWrapper( value ) {\n\t\treturn isndarrayLikeWithDataType( value, dtype );\n\t}\n\n\t/**\n\t* Interchanges two vectors.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - first input array\n\t* @param {ndarrayLike} y - second input array\n\t* @param {NegativeInteger} [dim] - dimension along which to interchange elements\n\t* @throws {TypeError} first argument must be an ndarray\n\t* @throws {TypeError} first argument must have at least one dimension\n\t* @throws {TypeError} second argument must be an ndarray\n\t* @throws {TypeError} second argument must have at least one dimension\n\t* @throws {Error} both input arrays must have the same shape\n\t* @throws {RangeError} third argument is out-of-bounds\n\t* @throws {Error} cannot write to read-only array\n\t* @returns {ndarrayLike} `y`\n\t*/\n\tfunction swap( x, y ) {\n\t\tvar dim;\n\t\tvar xsh;\n\t\tvar ysh;\n\t\tvar xit;\n\t\tvar yit;\n\t\tvar xc;\n\t\tvar yc;\n\t\tvar vx;\n\t\tvar vy;\n\t\tvar dm;\n\t\tvar S;\n\t\tvar N;\n\t\tvar i;\n\t\tif ( !isValid( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object having a supported data type. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( !isValid( y ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object having a supported data type. Value: `%s`.', y ) );\n\t\t}\n\t\tif ( isReadOnly( x ) || isReadOnly( y ) ) {\n\t\t\tthrow new Error( 'invalid argument. Cannot write to read-only array.' );\n\t\t}\n\t\t// Convert the input arrays to \"base\" ndarrays:\n\t\txc = ndarraylike2ndarray( x );\n\t\tyc = ndarraylike2ndarray( y );\n\n\t\t// Resolve the input array shapes:\n\t\txsh = xc.shape;\n\t\tysh = yc.shape;\n\n\t\t// Validate that we've been provided non-zero-dimensional arrays...\n\t\tif ( xsh.length < 1 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must have at least one dimension.' ) );\n\t\t}\n\t\tif ( ysh.length < 1 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must have at least one dimension.' ) );\n\t\t}\n\t\t// Validate that the arrays have the same shape...\n\t\tif ( !hasEqualValues( xsh, ysh ) ) {\n\t\t\tthrow new Error( 'invalid arguments. The first and second arguments must have the same shape.' );\n\t\t}\n\t\t// Validate that the dimension argument is a negative integer...\n\t\tif ( arguments.length > 2 ) {\n\t\t\tdim = arguments[ 2 ];\n\t\t\tif ( !isNegativeInteger( dim ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a negative integer. Value: `%s`.', dim ) );\n\t\t\t}\n\t\t} else {\n\t\t\tdim = -1;\n\t\t}\n\t\t// Validate that a provided dimension index is within bounds...\n\t\tdm = min( xsh.length, ysh.length ) - 1;\n\t\tdim = normalizeIndex( dim, dm );\n\t\tif ( dim === -1 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.', -dm, -1, arguments[ 2 ] ) );\n\t\t}\n\t\t// Resolve the size of the interchange dimension:\n\t\tS = xsh[ dim ];\n\n\t\t// If we are only provided one-dimensional input arrays, we can skip iterating over stacks...\n\t\tif ( xsh.length === 1 ) {\n\t\t\tbase( S, xc.data, xc.strides[0], xc.offset, yc.data, yc.strides[0], yc.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\t// Resolve the number of stacks:\n\t\tN = numel( without( xsh, dim ) );\n\n\t\t// Create iterators for iterating over stacks of vectors:\n\t\txit = nditerStacks( xc, [ dim ] );\n\t\tyit = nditerStacks( yc, [ dim ] );\n\n\t\t// Interchange each pair of vectors...\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tvx = xit.next().value;\n\t\t\tvy = yit.next().value;\n\t\t\tbase( S, vx.data, vx.strides[0], vx.offset, vy.data, vy.strides[0], vy.offset ); // eslint-disable-line max-len\n\t\t}\n\t\treturn y;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n"],"names":["factory","base","dtype","isValid","isFunction","TypeError","format","isDataType","value","isndarrayLikeWithDataType","isndarrayLike","x","y","dim","xsh","ysh","xit","yit","xc","yc","vx","vy","dm","S","N","i","isReadOnly","Error","ndarraylike2ndarray","shape","length","hasEqualValues","arguments","isNegativeInteger","min","normalizeIndex","RangeError","data","strides","offset","numel","without","nditerStacks","next"],"mappings":";;03CAmEA,SAASA,EAASC,EAAMC,GACvB,IAAIC,EACJ,IAAMC,EAAYH,GACjB,MAAM,IAAII,UAAWC,EAAQ,SAAUL,IAExC,IAAMM,EAAYL,IAAqB,OAAVA,EAC5B,MAAM,IAAIG,UAAWC,EAAQ,mEAAoEJ,IAGlG,OADAC,EAAU,EAUV,SAAyBK,GACxB,OAAOC,EAA2BD,EAAON,EACzC,EAZsCQ,EA8BvC,SAAeC,EAAGC,GACjB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMtB,EAASQ,GACd,MAAM,IAAIN,UAAWC,EAAQ,6GAA8GK,IAE5I,IAAMR,EAASS,GACd,MAAM,IAAIP,UAAWC,EAAQ,8GAA+GM,IAE7I,GAAKc,EAAYf,IAAOe,EAAYd,GACnC,MAAM,IAAIe,MAAO,sDAWlB,GARAT,EAAKU,EAAqBjB,GAC1BQ,EAAKS,EAAqBhB,GAG1BE,EAAMI,EAAGW,MACTd,EAAMI,EAAGU,MAGJf,EAAIgB,OAAS,EACjB,MAAM,IAAIzB,UAAWC,EAAQ,uEAE9B,GAAKS,EAAIe,OAAS,EACjB,MAAM,IAAIzB,UAAWC,EAAQ,wEAG9B,IAAMyB,EAAgBjB,EAAKC,GAC1B,MAAM,IAAIY,MAAO,+EAGlB,GAAKK,UAAUF,OAAS,GAEvB,IAAMG,EADNpB,EAAMmB,UAAW,IAEhB,MAAM,IAAI3B,UAAWC,EAAQ,4EAA6EO,SAG3GA,GAAO,EAKR,GAFAS,EAAKY,EAAKpB,EAAIgB,OAAQf,EAAIe,QAAW,GAEvB,KADdjB,EAAMsB,EAAgBtB,EAAKS,IAE1B,MAAM,IAAIc,WAAY9B,EAAQ,2FAA4FgB,GAAK,EAAGU,UAAW,KAM9I,GAHAT,EAAIT,EAAKD,GAGW,IAAfC,EAAIgB,OAER,OADA7B,EAAMsB,EAAGL,EAAGmB,KAAMnB,EAAGoB,QAAQ,GAAIpB,EAAGqB,OAAQpB,EAAGkB,KAAMlB,EAAGmB,QAAQ,GAAInB,EAAGoB,QAChE3B,EAUR,IAPAY,EAAIgB,EAAOC,EAAS3B,EAAKD,IAGzBG,EAAM0B,EAAcxB,EAAI,CAAEL,IAC1BI,EAAMyB,EAAcvB,EAAI,CAAEN,IAGpBY,EAAI,EAAGA,EAAID,EAAGC,IACnBL,EAAKJ,EAAI2B,OAAOnC,MAChBa,EAAKJ,EAAI0B,OAAOnC,MAChBP,EAAMsB,EAAGH,EAAGiB,KAAMjB,EAAGkB,QAAQ,GAAIlB,EAAGmB,OAAQlB,EAAGgB,KAAMhB,EAAGiB,QAAQ,GAAIjB,EAAGkB,QAExE,OAAO3B,CACP,CACF"}