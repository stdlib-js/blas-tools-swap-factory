{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isndarrayLikeWithDataType = require( '@stdlib/assert-is-ndarray-like-with-data-type' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isNegativeInteger = require( '@stdlib/assert-is-negative-integer' ).isPrimitive;\nvar isDataType = require( '@stdlib/ndarray-base-assert-is-data-type' );\nvar isReadOnly = require( '@stdlib/ndarray-base-assert-is-read-only' );\nvar hasEqualValues = require( '@stdlib/array-base-assert-has-equal-values-indexed' );\nvar min = require( '@stdlib/math-base-special-fast-min' );\nvar without = require( '@stdlib/array-base-without' );\nvar ndarraylike2ndarray = require( '@stdlib/ndarray-base-ndarraylike2ndarray' );\nvar normalizeIndex = require( '@stdlib/ndarray-base-normalize-index' );\nvar nditerStacks = require( '@stdlib/ndarray-iter-stacks' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns a function which interchanges two vectors.\n*\n* @param {Function} base - \"base\" function which interchanges two vectors\n* @param {(String|null)} dtype - array data type\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a data type\n* @returns {Function} function wrapper\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var array = require( '@stdlib/ndarray-array' );\n* var dswap = require( '@stdlib/blas-base-dswap' ).ndarray;\n*\n* var swap = factory( dswap, 'float64' );\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* swap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float64Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float64Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\nfunction factory( base, dtype ) {\n\tvar isValid;\n\tif ( !isFunction( base ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', base ) );\n\t}\n\tif ( !isDataType( dtype ) && dtype !== null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a data type. Value: `%s`.', dtype ) );\n\t}\n\tisValid = ( dtype ) ? isValidWrapper : isndarrayLike;\n\treturn swap;\n\n\t/**\n\t* Tests if an input value is an ndarray-like object having a specified data type.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating if an input value is an ndarray-like object having a specified data type\n\t*/\n\tfunction isValidWrapper( value ) {\n\t\treturn isndarrayLikeWithDataType( value, dtype );\n\t}\n\n\t/**\n\t* Interchanges two vectors.\n\t*\n\t* @private\n\t* @param {ndarrayLike} x - first input array\n\t* @param {ndarrayLike} y - second input array\n\t* @param {NegativeInteger} [dim] - dimension along which to interchange elements\n\t* @throws {TypeError} first argument must be an ndarray\n\t* @throws {TypeError} first argument must have at least one dimension\n\t* @throws {TypeError} second argument must be an ndarray\n\t* @throws {TypeError} second argument must have at least one dimension\n\t* @throws {Error} both input arrays must have the same shape\n\t* @throws {RangeError} third argument is out-of-bounds\n\t* @throws {Error} cannot write to read-only array\n\t* @returns {ndarrayLike} `y`\n\t*/\n\tfunction swap( x, y ) {\n\t\tvar dim;\n\t\tvar xsh;\n\t\tvar ysh;\n\t\tvar xit;\n\t\tvar yit;\n\t\tvar xc;\n\t\tvar yc;\n\t\tvar vx;\n\t\tvar vy;\n\t\tvar dm;\n\t\tvar S;\n\t\tvar N;\n\t\tvar i;\n\t\tif ( !isValid( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object having a supported data type. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( !isValid( y ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object having a supported data type. Value: `%s`.', y ) );\n\t\t}\n\t\tif ( isReadOnly( x ) || isReadOnly( y ) ) {\n\t\t\tthrow new Error( 'invalid argument. Cannot write to read-only array.' );\n\t\t}\n\t\t// Convert the input arrays to \"base\" ndarrays:\n\t\txc = ndarraylike2ndarray( x );\n\t\tyc = ndarraylike2ndarray( y );\n\n\t\t// Resolve the input array shapes:\n\t\txsh = xc.shape;\n\t\tysh = yc.shape;\n\n\t\t// Validate that we've been provided non-zero-dimensional arrays...\n\t\tif ( xsh.length < 1 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must have at least one dimension.' ) );\n\t\t}\n\t\tif ( ysh.length < 1 ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must have at least one dimension.' ) );\n\t\t}\n\t\t// Validate that the arrays have the same shape...\n\t\tif ( !hasEqualValues( xsh, ysh ) ) {\n\t\t\tthrow new Error( 'invalid arguments. The first and second arguments must have the same shape.' );\n\t\t}\n\t\t// Validate that the dimension argument is a negative integer...\n\t\tif ( arguments.length > 2 ) {\n\t\t\tdim = arguments[ 2 ];\n\t\t\tif ( !isNegativeInteger( dim ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a negative integer. Value: `%s`.', dim ) );\n\t\t\t}\n\t\t} else {\n\t\t\tdim = -1;\n\t\t}\n\t\t// Validate that a provided dimension index is within bounds...\n\t\tdm = min( xsh.length, ysh.length ) - 1;\n\t\tdim = normalizeIndex( dim, dm );\n\t\tif ( dim === -1 ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. Third argument must be a value on the interval: [%d,%d]. Value: `%d`.', -dm, -1, arguments[ 2 ] ) );\n\t\t}\n\t\t// Resolve the size of the interchange dimension:\n\t\tS = xsh[ dim ];\n\n\t\t// If we are only provided one-dimensional input arrays, we can skip iterating over stacks...\n\t\tif ( xsh.length === 1 ) {\n\t\t\tbase( S, xc.data, xc.strides[0], xc.offset, yc.data, yc.strides[0], yc.offset ); // eslint-disable-line max-len\n\t\t\treturn y;\n\t\t}\n\t\t// Resolve the number of stacks:\n\t\tN = numel( without( xsh, dim ) );\n\n\t\t// Create iterators for iterating over stacks of vectors:\n\t\txit = nditerStacks( xc, [ dim ] );\n\t\tyit = nditerStacks( yc, [ dim ] );\n\n\t\t// Interchange each pair of vectors...\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tvx = xit.next().value;\n\t\t\tvy = yit.next().value;\n\t\t\tbase( S, vx.data, vx.strides[0], vx.offset, vy.data, vy.strides[0], vy.offset ); // eslint-disable-line max-len\n\t\t}\n\t\treturn y;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a function which interchanges vectors.\n*\n* @module @stdlib/blas-tools-swap-factory\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var array = require( '@stdlib/ndarray-array' );\n* var dswap = require( '@stdlib/blas-base-dswap' ).ndarray;\n* var factory = require( '@stdlib/blas-tools-swap-factory' );\n*\n* var swap = factory( dswap, 'float64' );\n*\n* var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\n* var y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\n*\n* swap( x, y );\n*\n* var xbuf = x.data;\n* // returns <Float64Array>[ 2.0, 6.0, -1.0, -4.0, 8.0 ]\n*\n* var ybuf = y.data;\n* // returns <Float64Array>[ 4.0, 2.0, -3.0, 5.0, -1.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isFunction", "isndarrayLikeWithDataType", "isndarrayLike", "isNegativeInteger", "isDataType", "isReadOnly", "hasEqualValues", "min", "without", "ndarraylike2ndarray", "normalizeIndex", "nditerStacks", "numel", "format", "factory", "base", "dtype", "isValid", "isValidWrapper", "swap", "value", "x", "y", "dim", "xsh", "ysh", "xit", "yit", "xc", "yc", "vx", "vy", "dm", "S", "N", "i", "main"]
}
